$schema: "http://json-schema.org/draft-07/schema#"
title: "ObjectAPI 1.0 Schema"
type: object
additionalProperties: false
required: [name, version]
properties:
  schema:
    type: string
    enum: ["apigear.module/1.0"]
    description: "The ApiGear ObjectAPI specification version of this document."
  name:
    type: string
    description: module name, should be all lowercase and only contain letters and dots.
  version:
    type: string
    description: the version of this document as string, typically something like '1.0'
  description:
    type: string
    description: the module description. Will be added to the module documentation
  meta:
    type: object
    description: meta information are read by the individual blueprint. Read the blueprint manual which meta tags are supported.
  interfaces: # array of interfaces
    description: a list of interfaces, exported by this module
    type: array
    items: # each interface is and object with at least a name
      $ref: "#/definitions/Interface"
  structs: # array of structs
    description: a list of data structures, exported by this module
    type: array
    items: # each struct is an object with at least a name
      $ref: "#/definitions/Struct"
  enums: # array of items inside a module
    description: a list of enumerations, exported by this module
    type: array
    items: # each enum is an object with at least a name
      $ref: "#/definitions/Enum"

definitions:
  TypeKey:
    oneOf:
      - type: string
        enum: [int, int32, int64, float, float32, float64, bool, string]
      - type: string
        pattern: "^[A-Z][0-9A-Za-z_]+$"
  NamedType:
    type: object
    required: [name, type]
    additionalProperties: false
    properties:
      name: { type: string }
      description: { type: string }
      meta: { type: object }
      type: { $ref: "#/definitions/TypeKey" }
      array: { type: boolean }
      readonly: { type: boolean }
  Type:
    type: object
    required: [type]
    additionalProperties: false
    properties:
      description: { type: string }
      meta: { type: object }
      type: { $ref: "#/definitions/TypeKey" }
      array: { type: boolean }
  Interface:
    type: object
    required: [name]
    additionalProperties: false
    properties:
      name: { type: string }
      description: { type: string }
      meta: { type: object }
      properties: # properties inside interface
        type: array
        items:
          $ref: "#/definitions/NamedType"
      operations: # operations inside interface
        type: array
        items:
          $ref: "#/definitions/Operation"
      signals: # signals inside interface
        type: array
        items:
          $ref: "#/definitions/Operation"
  Struct:
    type: object
    required: [name]
    additionalProperties: false
    properties:
      name: { type: string }
      description: { type: string }
      meta: { type: object }
      fields: # fields inside struct
        type: array
        items:
          $ref: "#/definitions/NamedType"
  Enum:
    type: object
    required: [name]
    additionalProperties: false
    properties:
      name: { type: string }
      description: { type: string }
      meta: { type: object }
      members: # members are name value pairs, where the value must be an integer, or empty
        type: array
        items:
          $ref: "#/definitions/EnumMember"
  Operation: # a operation or signal inside an interface
    type: object
    additionalProperties: false
    properties:
      name: { type: string }
      description: { type: string }
      meta: { type: object }
      return:
        $ref: "#/definitions/Type"
      params:
        type: array
        items:
          $ref: "#/definitions/NamedType"
  EnumMember: # member value inside an enum
    type: object
    additionalProperties: false
    required: [name]
    properties:
      name: { type: string }
      description: { type: string }
      meta: { type: object }
      value: { type: integer }
