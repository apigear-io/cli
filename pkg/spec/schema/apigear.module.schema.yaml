$schema: "http://json-schema.org/draft-07/schema#"
description: |
  This is the schema for the ObjectAPI 1.0 specification. 
  It is used to validate the ObjectAPI 1.0 specification.

  An example of a valid ObjectAPI 1.0 specification is:

  ```
  schema: apigear.module/1.0
  name: my.module
  version: 1.0
  interfaces:
    - name: Counter
      properties:
        - name: value
          type: int
      operations:
        - name: increment
          params:
            - name: value
              type: int
          return: int
        - name: decrement
          params:
            - name: value
              type: int
          return: int
  ```

title: "ObjectAPI 1.0 Schema"
type: object
additionalProperties: false
required: [name]
properties:
  schema:
    type: string
    description: "The ApiGear ObjectAPI specification version of this document."
    enum: ["apigear.module/1.0"]
    default: "apigear.module/1.0"
  name:
    type: string
    description: module name, starts with a letter, followed by letters, numbers, underscores or dots (e.g. a.b.c)
    pattern: "^[a-zA-Z][0-9A-Za-z_.]*$"
  imports:
    type: array
    description: a list of imported modules
    items:
      type: object
      required: [name]
      additionalProperties: false
      properties:
        name:
          type: string
          description: module name, starts with a letter, followed by letters, numbers, underscores or dots (e.g. a.b.c)
          pattern: "^[a-zA-Z][0-9A-Za-z_.]*$"
        description:
          type: string
          description: import description. Should be a short description for the import
        meta:
          type: object
          description: meta information for the import. Read the template manual which meta tags are supported.
  version:
    type: string
    description: module version, should be a major and minor and an optional patch version, separated by a dot.
    pattern: "^[0-9]+[.][0-9]+([.][0-9]+)*$"
    default: "1.0"
  description:
    type: string
    description: module description. Should be a short description of the module.
  meta:
    type: object
    description: meta information are read by the individual template. Read the template manual which meta tags are supported.
  interfaces:
    type: array
    description: a list of interfaces, exported by this module
    items:
      $ref: "#/definitions/Interface"
  structs:
    type: array
    description: a list of data structures, exported by this module
    items:
      $ref: "#/definitions/Struct"
  enums:
    type: array
    description: a list of enumerations, exported by this module
    items:
      $ref: "#/definitions/Enum"

definitions:
  NamedType:
    type: object
    description: "A named type is a type with a name and a type."
    required: [name, type]
    additionalProperties: false
    properties:
      name:
        type: string
        description: "A name starts with a letter, followed by zero-or-more letters, numbers or underscores."
        pattern: "^[a-zA-Z][0-9A-Za-z_]*$"
      description:
        type: string
        description: "A description of the type."
      meta:
        type: object
        description: "Meta information are read by the individual template. Read the template manual which meta tags are supported."
      type:
        type: string
        description: "A type either a primitive type or a declared type name."
      import:
        type: string
        description: "The name of the module where the type is defined."
      array:
        type: boolean
        description: "If true, the type is an array of the given type."
      readonly:
        type: boolean
        description: "If true, the type is readonly."
  Type:
    type: object
    description: "A type is a type key with additional information."
    required: [type]
    additionalProperties: false
    properties:
      description:
        type: string
        description: "A description of the type."
      meta:
        type: object
        description: "Meta information are read by the individual template. Read the template manual which meta tags are supported."
      type:
        type: string
        description: "A primitive type or a declared type name."
      import:
        type: string
        description: "The name of the module where the type is defined."
      array:
        type: boolean
        description: "If true, the type is an array of the given type."

  Interface:
    type: object
    description: "An interface is a collection of properties, operations and signals."
    required: [name]
    additionalProperties: false
    properties:
      name:
        type: string
        description: "A name starts with a letter, followed by zero-or-more letters, numbers or underscores."
        pattern: "^[a-zA-Z][0-9A-Za-z_]*$"
      description:
        type: string
        description: "A description of the interface."
      extends:
        type: object
        description: "The interface extends another interface."
        required: [name]
        additionalProperties: false
        properties:
          name:
            type: string
            description: "A name starts with a letter, followed by zero-or-more letters, numbers or underscores."
            pattern: "^[a-zA-Z][0-9A-Za-z_]*$"
          import:
            type: string
            description: "The name of the module where the interface is defined."
      meta:
        type: object
        description: "Meta information are read by the individual template. Read the template manual which meta tags are supported."
      properties:
        type: array
        description: "A list of properties."
        items:
          $ref: "#/definitions/NamedType"
      operations:
        type: array
        description: "A list of operations."
        items:
          $ref: "#/definitions/Operation"
      signals:
        type: array
        description: "A list of signals."
        items:
          $ref: "#/definitions/Operation"
  Struct:
    type: object
    description: "A struct is a collection of fields."
    required: [name]
    additionalProperties: false
    properties:
      name:
        type: string
        description: "A name starts with a letter, followed by zero-or-more letters, numbers or underscores."
        pattern: "^[a-zA-Z][0-9A-Za-z_]*$"
      description:
        type: string
        description: "A description of the struct."
      meta:
        type: object
        description: "Meta information are read by the individual template. Read the template manual which meta tags are supported."
      fields:
        type: array
        description: "A list of fields."
        items:
          $ref: "#/definitions/NamedType"
  Enum:
    type: object
    description: "An enum is a collection of name, value pairs."
    required: [name]
    additionalProperties: false
    properties:
      name:
        type: string
        description: "A name starts with a letter, followed by zero-or-more letters, numbers or underscores."
        pattern: "^[a-zA-Z][0-9A-Za-z_]*$"
      description:
        type: string
        description: "A description of the enum."
      meta:
        type: object
        description: "Meta information are read by the individual template. Read the template manual which meta tags are supported."
      members:
        type: array
        description: "A list of members."
        items:
          $ref: "#/definitions/EnumMember"
  Operation:
    type: object
    description: "An operation is a function with a name, parameters and a return type."
    additionalProperties: false
    properties:
      name:
        type: string
        description: "A name starts with a letter, followed by zero-or-more letters, numbers or underscores."
        pattern: "^[a-zA-Z][0-9A-Za-z_]*$"
      description:
        type: string
        description: "A description of the operation."
      meta:
        type: object
        description: "Meta information are read by the individual template. Read the template manual which meta tags are supported."
      return:
        $ref: "#/definitions/Type"
      params:
        type: array
        description: "A list of operation parameters."
        items:
          $ref: "#/definitions/NamedType"
  EnumMember: # member value inside an enum
    type: object
    description: "An enum member is a name, value pair."
    additionalProperties: false
    required: [name]
    properties:
      name:
        type: string
        description: "A name starts with a letter, followed by zero-or-more letters, numbers or underscores."
        pattern: "^[a-zA-Z][0-9A-Za-z_]*$"
      description:
        type: string
        description: "A description of the enum member."
      meta:
        type: object
        description: "Meta information are read by the individual template. Read the template manual which meta tags are supported."
      value:
        type: integer
        description: "The value of the enum member. It must be unique within the enum and must be a positive integer."
        minimum: 0
