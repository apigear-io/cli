---
"$id": https://apigear.co/schemas/rules.schema.json
"$schema": http://json-schema.org/draft-07/schema#
title: ObjectAPI rules engine
description: |
  Rules engine to drive the object api generator
  A typical setup looks like this:
  ```
  schema: apigear.rules/1.0
  name: simple cpp template
  engines:
    cli: ">= v0.1.0 < v1.0.0"
  features:
    - name: api
      path: {{dot .Module.Name}}/
      scopes:
        - match: module
          documents:
            - source: api.h
              target: api.h

    - name: core
      requires: [api]
      path: {{dot .Module.Name}}/
      scopes:
        - match: module
          documents:
            - source: core.h
            - target: core.h
            - source: core.cpp
              target: core.cpp
    - name: init
      requires: [core]
      path: {{dot .Module.Name}}/
      scopes:
        - name: module
          documents:
            - source: Makefile
            - source: service.h
              target: {{snake .Interface.Name}}.h
            - source: service.cpp
              target: {{snake .Interface.Name}}.cpp
  ```

type: object
additionalProperties: false
properties:
  schema:
    type: string
    description: "The ApiGear rules specification version of this document."
    enum: ["apigear.rules/1.0"]
    default: "apigear.rules/1.0"
  name:
    type: string
    description: "The name of the rules document. It should be a short, descriptive name of the rules document."
  version:
    type: string
    description: "The version of the rules document. Should be a major and minor and an optional patch version, separated by a dot (e.g. 0.1 or 0.1.0)."
    pattern: "^[0-9]+[.][0-9]+([.][0-9]+)*$"
    default: "0.1.0"
  engines:
    type: object
    description: Engines defines a list cli versions which are supported by this rules engine.
    additionalProperties: false
    properties:
      cli:
        type: string
        description: SemVer version constraint for the cli engine (e.g. ">= v0.1.0 < v1.0.0")
  languages:
    type: array
    description: Languages defines a list of generated coding languages (e.g. cpp, java, py, ue, rs, go, ...) which are supported by this rules engine.
    items:
      type: string
      description: Coding language name. It should be a short, descriptive name of the coding language.
  features:
    description: Features define different aspects of the generated code, for example core, stubs, api.
    type: array
    items: # each feature is an object with at least a name
      $ref: "#/definitions/Feature"
definitions:
  Feature:
    description: Feature defines a certain aspect in a template which can be enabled.
    type: object
    additionalProperties: false
    properties:
      name:
        type: string
        description: Name of the feature. This is used to enable/disable the feature on the command line. All features are enabled by default. Features must be lowercase and start with a letter, they can contain letters, numbers, hyphens and underscores.
        pattern: "^[a-z][a-z0-9-_]*$"
      requires:
        type: array
        description: Requires defines a list of features which must be run before this feature can be used.
        items:
          type: string
          description: Name of the feature which must be run before this feature can be used.
          pattern: "^[a-z][a-z0-9-_]*$"
      path:
        description: Path defines the a template enabled path where the documents will be written to. For example '{{dot .Module.Name}}/api' 
        type: string
      scopes:
        description: Scopes defines a list of scoped api nodes the feature applies to (e.g. system, module, interface, struct, enum).
        type: array
        items:
          $ref: "#/definitions/Scope"
  Scope:
    type: object
    description: Scope defines a set of documents which will be transformed, when the scope is applied.
    additionalProperties: false
    properties:
      match:
        type: string
        description: Match defines the context where this scope is applied to, e.g. system, module, interface, struct, enum.
        enum: [system, module, interface, struct, enum]
      prefix:
        type: string
        description: Prefix defines the prefix for all documents written
      documents:
        type: array
        description: List of documents which will be transformed using the template engine.
        items:
          "$ref": "#/definitions/Document"
  Document:
    type: object
    description: Document defines a file which will be transformed using the template engine from source to target. If target is not specified, it will be the same as the source.
    required: [source]
    additionalProperties: false
    properties:
      source:
        type: string
        description: Source defines the source file name, relative to the templates folder. If only the source is given, the target will be the same as the source.
      target:
        type: string
        description: Target defines the document target path relative to the output folder
      force:
        type: boolean
        description: Force defines whether the document should be forcefully overwritten if it already exists.
        default: false
      preserve:
        type: boolean
        description: Preserve defines whether the document should be preserved if it already exists (can be overwritten by force).
        default: false
      raw:
        type: boolean
        description: When true, the template engine will not be applied to the document, it will be copied as is.
        default: false
