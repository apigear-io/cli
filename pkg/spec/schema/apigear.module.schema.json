{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
    "Enum": {
      "additionalProperties": false,
      "description": "An enum is a collection of name, value pairs.",
      "properties": {
        "description": {
          "description": "A description of the enum.",
          "type": "string"
        },
        "members": {
          "description": "A list of members.",
          "items": {
            "$ref": "#/definitions/EnumMember"
          },
          "type": "array"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "EnumMember": {
      "additionalProperties": false,
      "description": "An enum member is a name, value pair.",
      "properties": {
        "description": {
          "description": "A description of the enum member.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        },
        "value": {
          "description": "The value of the enum member. It must be unique within the enum and must be a positive integer.",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Interface": {
      "additionalProperties": false,
      "description": "An interface is a collection of properties, operations and signals.",
      "properties": {
        "description": {
          "description": "A description of the interface.",
          "type": "string"
        },
        "extends": {
          "additionalProperties": false,
          "description": "The interface extends another interface.",
          "properties": {
            "import": {
              "description": "The name of the module where the interface is defined.",
              "type": "string"
            },
            "name": {
              "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
              "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations.",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "type": "array"
        },
        "properties": {
          "description": "A list of properties.",
          "items": {
            "$ref": "#/definitions/NamedType"
          },
          "type": "array"
        },
        "signals": {
          "description": "A list of signals.",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "NamedType": {
      "additionalProperties": false,
      "description": "A named type is a type with a name and a type.",
      "properties": {
        "array": {
          "description": "If true, the type is an array of the given type.",
          "type": "boolean"
        },
        "description": {
          "description": "A description of the type.",
          "type": "string"
        },
        "import": {
          "description": "The name of the module where the type is defined.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        },
        "readonly": {
          "description": "If true, the type is readonly.",
          "type": "boolean"
        },
        "type": {
          "description": "A type either a primitive type or a declared type name.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "Operation": {
      "additionalProperties": false,
      "description": "An operation is a function with a name, parameters and a return type.",
      "properties": {
        "description": {
          "description": "A description of the operation.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        },
        "params": {
          "description": "A list of operation parameters.",
          "items": {
            "$ref": "#/definitions/NamedType"
          },
          "type": "array"
        },
        "return": {
          "$ref": "#/definitions/Type"
        }
      },
      "type": "object"
    },
    "Struct": {
      "additionalProperties": false,
      "description": "A struct is a collection of fields.",
      "properties": {
        "description": {
          "description": "A description of the struct.",
          "type": "string"
        },
        "fields": {
          "description": "A list of fields.",
          "items": {
            "$ref": "#/definitions/NamedType"
          },
          "type": "array"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Type": {
      "additionalProperties": false,
      "description": "A type is a type key with additional information.",
      "properties": {
        "array": {
          "description": "If true, the type is an array of the given type.",
          "type": "boolean"
        },
        "description": {
          "description": "A description of the type.",
          "type": "string"
        },
        "import": {
          "description": "The name of the module where the type is defined.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "type": {
          "description": "A primitive type or a declared type name.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    }
  },
  "description": "This is the schema for the ObjectAPI 1.0 specification. \nIt is used to validate the ObjectAPI 1.0 specification.\n\nAn example of a valid ObjectAPI 1.0 specification is:\n\n```\nschema: apigear.module/1.0\nname: my.module\nversion: 1.0\ninterfaces:\n  - name: Counter\n    properties:\n      - name: value\n        type: int\n    operations:\n      - name: increment\n        params:\n          - name: value\n            type: int\n        return: int\n      - name: decrement\n        params:\n          - name: value\n            type: int\n        return: int\n```\n",
  "properties": {
    "description": {
      "description": "module description. Should be a short description of the module.",
      "type": "string"
    },
    "enums": {
      "description": "a list of enumerations, exported by this module",
      "items": {
        "$ref": "#/definitions/Enum"
      },
      "type": "array"
    },
    "imports": {
      "description": "a list of imported modules",
      "items": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "import description. Should be a short description for the import",
            "type": "string"
          },
          "meta": {
            "description": "meta information for the import. Read the template manual which meta tags are supported.",
            "type": "object"
          },
          "name": {
            "description": "module name, starts with a letter, followed by letters, numbers, underscores or dots (e.g. a.b.c)",
            "pattern": "^[a-zA-Z][0-9A-Za-z_.]*$",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "interfaces": {
      "description": "a list of interfaces, exported by this module",
      "items": {
        "$ref": "#/definitions/Interface"
      },
      "type": "array"
    },
    "meta": {
      "description": "meta information are read by the individual template. Read the template manual which meta tags are supported.",
      "type": "object"
    },
    "name": {
      "description": "module name, starts with a letter, followed by letters, numbers, underscores or dots (e.g. a.b.c)",
      "pattern": "^[a-zA-Z][0-9A-Za-z_.]*$",
      "type": "string"
    },
    "schema": {
      "default": "apigear.module/1.0",
      "description": "The ApiGear ObjectAPI specification version of this document.",
      "enum": [
        "apigear.module/1.0"
      ],
      "type": "string"
    },
    "structs": {
      "description": "a list of data structures, exported by this module",
      "items": {
        "$ref": "#/definitions/Struct"
      },
      "type": "array"
    },
    "version": {
      "default": "0.1",
      "description": "module version, should be a major and minor and an optional patch version, separated by a dot.",
      "pattern": "^[0-9]+[.][0-9]+([.][0-9]+)*$",
      "type": "string"
    }
  },
  "required": [
    "name",
    "version"
  ],
  "title": "ObjectAPI 1.0 Schema",
  "type": "object"
}