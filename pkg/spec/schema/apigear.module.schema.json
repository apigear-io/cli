{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "definitions": {
    "Enum": {
      "additionalProperties": false,
      "description": "An enum is an enumeration type that consists of a set of named values.",
      "properties": {
        "description": {
          "description": "A description of the enum.",
          "type": "string"
        },
        "members": {
          "description": "An array of members.",
          "items": {
            "$ref": "#/definitions/EnumMember"
          },
          "type": "array"
        },
        "meta": {
          "description": "Meta information is evaluated by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "EnumMember": {
      "additionalProperties": false,
      "description": "An enum member is a name, value pair.",
      "properties": {
        "description": {
          "description": "A description of the enum member.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        },
        "value": {
          "description": "The value of the enum member. It must be unique within the enum and must be a positive integer. If no value is specified, the first member will be assigned the value 0, and subsequent members will be assigned incrementing values.",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Extern": {
      "additionalProperties": false,
      "description": "An extern is a reference to a type to a native type defined outside of the set of modules.",
      "properties": {
        "description": {
          "description": "A description of the extern.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information is evaluated by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Interface": {
      "additionalProperties": false,
      "description": "An interface is a collection of reactive properties, callable operations and emittable signals. Names of properties, operations and signals must be unique within the interface.",
      "properties": {
        "description": {
          "description": "A description of the interface. This should provide a clear and concise explanation of the interface's purpose and functionality.",
          "type": "string"
        },
        "extends": {
          "additionalProperties": false,
          "description": "An interface can extend another interface, inheriting its properties and operations. If the interface comes from another module, the import field must be set.",
          "properties": {
            "import": {
              "description": "The name of the module where the base interface is defined.",
              "type": "string"
            },
            "name": {
              "description": "The base interface this interface extends from. A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
              "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
              "type": "string"
            }
          },
          "required": [
            "name"
          ],
          "type": "object"
        },
        "meta": {
          "description": "Meta information is evaluated by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "The interface name, typical upper camel case (Vehicle, Ball). A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        },
        "operations": {
          "description": "An array of callable operations with parameters and a return type.",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "type": "array"
        },
        "properties": {
          "description": "An array of reactive properties (set\u003cName\u003e, get\u003cName\u003e, on\u003cName\u003e). Templates automatically generate setter, getter and change signal for each property.",
          "items": {
            "$ref": "#/definitions/NamedType"
          },
          "type": "array"
        },
        "signals": {
          "description": "An array of emittablesignals, with parameters.",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "NamedType": {
      "additionalProperties": false,
      "description": "Type information with a name. (e.g. name is a string)",
      "properties": {
        "array": {
          "description": "If true, the type is an array of the given type.",
          "type": "boolean"
        },
        "description": {
          "description": "A description of the type. Should be a short, descriptive text about the type.",
          "type": "string"
        },
        "import": {
          "description": "If the type is defined in another module, this is the name of that module.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        },
        "readonly": {
          "description": "If true, the type is readonly, meaning it cannot be modified after creation.",
          "type": "boolean"
        },
        "type": {
          "description": "A type either a primitive type (int, int16, int32, int64, float, float16, float32, float64, bool, string) or a declared type name (e.g. an interface name, struct name or enum name).",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "Operation": {
      "additionalProperties": false,
      "description": "An operation is a callable interface method, with parameters and a return type.",
      "properties": {
        "description": {
          "description": "A description of the operation. Should be a short, descriptive text about the operation.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information is evaluated by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        },
        "params": {
          "description": "An array of operation parameters.",
          "items": {
            "$ref": "#/definitions/NamedType"
          },
          "type": "array"
        },
        "return": {
          "$ref": "#/definitions/Type"
        }
      },
      "type": "object"
    },
    "Struct": {
      "additionalProperties": false,
      "description": "A struct is a message format that groups related data fields under a single name.",
      "properties": {
        "description": {
          "description": "A description of the struct.",
          "type": "string"
        },
        "fields": {
          "description": "An array of fields.",
          "items": {
            "$ref": "#/definitions/NamedType"
          },
          "type": "array"
        },
        "meta": {
          "description": "Meta information is evaluated by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "name": {
          "description": "A name starts with a letter, followed by zero-or-more letters, numbers or underscores.",
          "pattern": "^[a-zA-Z][0-9A-Za-z_]*$",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Type": {
      "additionalProperties": false,
      "description": "A type information without a name. (e.g. int), used for return types.",
      "properties": {
        "array": {
          "description": "If true, the type is an array of the given type.",
          "type": "boolean"
        },
        "description": {
          "description": "A description of the type.",
          "type": "string"
        },
        "import": {
          "description": "If the type is defined in another module, this is the name of that module.",
          "type": "string"
        },
        "meta": {
          "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
          "type": "object"
        },
        "type": {
          "description": "A primitive type or a defined type (such as interface, struct or enum).",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    }
  },
  "description": "This is the schema for the ObjectAPI 1.0 specification.\nIt is used to validate the ObjectAPI 1.0 specification.\n\nAn example of a valid ObjectAPI 1.0 specification is:\n\n```\nschema: apigear.module/1.0\nname: my.module\nversion: 1.0\ninterfaces:\n  - name: Counter\n    properties:\n      - name: value\n        type: int\n    operations:\n      - name: increment\n        params:\n          - name: value\n            type: int\n        return: int\n      - name: decrement\n        params:\n          - name: value\n            type: int\n        return: int\n```\n",
  "properties": {
    "description": {
      "description": "Module description. Should be a short description of the module.",
      "type": "string"
    },
    "enums": {
      "description": "A list of enumerations, defined by this module",
      "items": {
        "$ref": "#/definitions/Enum"
      },
      "type": "array"
    },
    "externs": {
      "description": "A list of externs, exported by this module. Externs are native types defined outside of the module and handled by the template.",
      "items": {
        "$ref": "#/definitions/Extern"
      },
      "type": "array"
    },
    "imports": {
      "description": "A list of imported modules",
      "items": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "Import description. Should be a short description for the import",
            "type": "string"
          },
          "meta": {
            "description": "Meta information for the import. Read the template manual which meta tags are supported.",
            "type": "object"
          },
          "name": {
            "description": "Module name to import, starts with a letter, followed by letters, numbers, underscores or dots (e.g. a.b.c)",
            "pattern": "^[a-zA-Z][0-9A-Za-z_.]*$",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "interfaces": {
      "description": "A list of interfaces, defined by this module",
      "items": {
        "$ref": "#/definitions/Interface"
      },
      "type": "array"
    },
    "meta": {
      "description": "Meta information are read by the individual template. Read the template manual which meta tags are supported.",
      "type": "object"
    },
    "name": {
      "description": "Module name inside the system. A module name must be unique inside the generated system. Starts with a letter, followed by letters, numbers, underscores or dots (e.g. a.b.c)",
      "pattern": "^[a-zA-Z][0-9A-Za-z_.]*$",
      "type": "string"
    },
    "schema": {
      "default": "apigear.module/1.0",
      "description": "The ApiGear ObjectAPI specification version of this document.",
      "enum": [
        "apigear.module/1.0"
      ],
      "type": "string"
    },
    "structs": {
      "description": "A list of data structures, defined by this module",
      "items": {
        "$ref": "#/definitions/Struct"
      },
      "type": "array"
    },
    "version": {
      "default": "1.0",
      "description": "Module version, should be a major and minor and an optional patch version, separated by a dot.",
      "pattern": "^[0-9]+[.][0-9]+([.][0-9]+)*$",
      "type": "string"
    }
  },
  "required": [
    "name"
  ],
  "title": "ObjectAPI 1.0 Schema",
  "type": "object"
}