module test 1.0

interface Test1 {
    propVoid: void
    propBool: bool
    propInt: int
    propInt32: int32
    propInt64: int64
    propFloat: float
    propFloat32: float32
    propFloat64: float64
    propString: string
    propBytes: bytes
    propAny: any
    propBoolArray: bool[]
    propIntArray: int[]
    propInt32Array: int32[]
    propInt64Array: int64[]
    propFloatArray: float[]
    propFloat32Array: float32[]
    propFloat64Array: float64[]
    propStringArray: string[]
    propBytesArray: bytes[]
    propAnyArray: any[]
    prop_Bool: bool
    prop_bool: bool
    prop_1: bool
}

interface Test2 {
    propEnum: Enum1
    propStruct: Struct1
    propInterface: Interface1
    propEnumArray: Enum1[]
    propStructArray: Struct1[]
    propInterfaceArray: Interface1[]
}

interface Test3 {
    opVoid(): void
    opBool(param1: bool): bool
    opInt(param1: int): int
    opInt32(param1: int32): int32
    opInt64(param1: int64): int64
    opFloat(param1: float): float
    opFloat32(param1: float32): float32
    opFloat64(param1: float64): float64
    opString(param1: string): string
    opBytes(param1: bytes): bytes
    opAny(param1: any): any
    opBoolArray(param1: bool[]): bool[]
    opIntArray(param1: int[]): int[]
    opInt32Array(param1: int32[]): int32[]
    opInt64Array(param1: int64[]): int64[]
    opFloatArray(param1: float[]): float[]
    opFloat32Array(param1: float32[]): float32[]
    opFloat64Array(param1: float64[]): float64[]
    opStringArray(param1: string[]): string[]
    opBytesArray(param1: bytes[]): bytes[]
    opAnyArray(param1: any[]): any[]
    op_Bool(param_Bool: bool): bool
    op_bool(param_bool: bool): bool
    op_1(param_1: bool): bool
}

interface Test4 {
    opEnum(param1: Enum1): Enum1
    opStruct(param1: Struct1): Struct1
    opInterface(param1: Interface1): Interface1
    opEnumArray(param1: Enum1[]): Enum1[]
    opStructArray(param1: Struct1[]): Struct1[]
    opInterfaceArray(param1: Interface1[]): Interface1[]
}

interface Test5 {
    opBoolBool(param1: bool, param2: bool): bool
    opIntInt(param1: int, param2: int): int
    opFloatFloat(param1: float, param2: float): float
    opStringString(param1: string, param2: string): string
    opBytesBytes(param1: bytes, param2: bytes): bytes
    opAnyAny(param1: any, param2: any): any
    opEnumEnum(param1: Enum1, param2: Enum1): Enum1
    opStructStruct(param1: Struct1, param2: Struct1): Struct1
    opInterfaceInterface(param1: Interface1, param2: Interface1): Interface1
}

interface Test6 {
    opBool(): bool
    opInt(): int
    opInt32(): int32
    opInt64(): int64
    opFloat(): float
    opFloat32(): float32
    opFloat64(): float64
    opString(): string
    opBytes(): bytes
    opAny(): any
    opVoid()
    opEnum(): Enum1
    opStruct(): Struct1
    opInterface(): Interface1
    opBoolArray(): bool[]
    opIntArray(): int[]
    opFloatArray(): float[]
    opStringArray(): string[]
    opEnumArray(): Enum1[]
    opStructArray(): Struct1[]
    opInterfaceArray(): Interface1[]
}


interface Interface1 { }

interface InterfaceNamesCheck {
    lowerEnumProp: EnumLowerNames
}

enum Enum1 {
    Default = 0,
    NotDefault = 1,
}

enum EnumLowerNames
{
    firstValue = 0,
    secondValue = 1,
}

struct Struct1 {}
